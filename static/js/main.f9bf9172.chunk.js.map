{"version":3,"sources":["PapaParser/PapaParser.tsx","PapaParser/index.tsx","Constants.ts","App/App.tsx","utils.ts","App/index.tsx","serviceWorker.js","index.js"],"names":["CSVParser","props","title","onFileLoaded","fileName","setFileName","loadHandler","res","target","readyState","result","dataString","csv","Papaparse","parse","header","parseString","errorHandler","evt","error","name","message","className","prefix","type","onChange","event","files","reader","FileReader","readAsText","onload","onerror","accept","Option","Select","offset","moment","utcOffset","App","useState","originCategories","setOriginCategories","categories","setCategories","categoriesLoaded","setCategoriesLoaded","years","setYears","months","setMonths","yearSelected","setYearSelected","monthSelected","setMonthSelected","tableData","setTableData","tableColumns","setTableColumns","showAddModal","setShowAddModal","originBill","setOriginBill","bill","setBill","billLoaded","setBillLoaded","formCategory","setFormCategory","categoryFileName","setCategoryFileName","billFileName","setBillFileName","Form","useForm","form","useEffect","data","columnSum","newBill","filter","item","year","month","forEach","push","category","amount","fullString","date","time","Object","keys","length","i","sort","a","b","day","columns","getTableColumns","handleBillData","newData","allMonths","allYears","Set","newTime","format","Constants","parseMilisecond","add","values","columnsData","dataIndex","id","outcomes","incomes","column","Math","abs","handleAddModal","validateFields","valueOf","newValues","billData","setFieldsValue","success","console","log","params","errors","meta","Array","isArray","fields","includes","warn","placeholder","style","width","minWidth","value","map","key","onClick","dataSource","rowKey","pagination","scroll","y","document","body","clientHeight","visible","onOk","onCancel","labelCol","span","wrapperCol","Item","label","rules","required","showTime","step","min","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f9bf9172.chunk.js","sourcesContent":["import React from 'react';\nimport Papaparse from 'papaparse';\nimport { message, Button, Input } from 'antd';\nimport { IPapaparserProps, IParseResult } from '../types';\nimport { prefix } from '.';\n\nconst CSVParser = (props: IPapaparserProps) => {\n  const {\n    title = 'Click to upload CSV file',\n    onFileLoaded = () => {},\n    fileName = '',\n    setFileName = () => {},\n  } = props || {}\n\n  const handleFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files: FileList | null = event.target.files;\n    if(files && files[0]){\n      setFileName(files[0].name)\n      const reader = new FileReader();\n      reader.readAsText(files[0]);\n      reader.onload = loadHandler;\n      reader.onerror = errorHandler;\n    }\n  }\n\n  const parseString = (dataString: string) => {\n    const csv: IParseResult = Papaparse.parse(dataString, {\n      header: true,\n    });\n\n    onFileLoaded(csv);\n  }\n\n  const loadHandler = (res: any) => {\n    const {\n      readyState,\n      result,\n    } = res.target || {}\n\n    if(readyState === 2){\n      parseString(result);\n    }\n  }\n\n  const errorHandler = (evt: any) => {\n    if(evt.target.error.name === \"NotReadableError\") {\n      message.error(\"Canno't read file !\");\n    }\n  }\n\n  return (\n    <Button className={prefix} type=\"primary\">\n      {fileName ? fileName : title}\n      <Input\n        type=\"file\"\n        onChange={handleFile}\n        accept=\".csv\"\n        className='inputFile'\n      />\n    </Button>\n  )\n\n}\n\nexport default CSVParser;","import './PapaParser.less';\n\nexport const prefix = 'bg-c-papaparser';\n\nexport { default } from './PapaParser';\n\n","export default {\n  YMD: 'YYYY-MM-DD',\n  YM: 'YYYY-MM',\n  Y: 'YYYY',\n}","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { Table, Button, Select, Modal, Form, InputNumber, DatePicker, message } from 'antd';\nimport { prefix } from '.';\nimport Papaparser from '../PapaParser';\nimport { IParseResult, ICategories, ICategory, IBill, IBillItem } from '../types';\nimport { parseMilisecond } from '../utils';\n\nconst Option = Select.Option;\nconst offset = moment().utcOffset();\n\nfunction App() {\n  const [originCategories, setOriginCategories] = useState<ICategory[]>([]);\n  const [categories, setCategories] = useState<ICategories>({});\n  const [categoriesLoaded, setCategoriesLoaded] = useState(false);\n  const [years, setYears] = useState<number[]>();\n  const [months, setMonths] = useState<{[index: string]: Set<number>}>();\n  const [yearSelected, setYearSelected] = useState<number>();\n  const [monthSelected, setMonthSelected] = useState<number>();\n  const [tableData, setTableData] = useState<any>();\n  const [tableColumns, setTableColumns] = useState<any>();\n  const [showAddModal, setShowAddModal] = useState<boolean>(false);\n  const [originBill, setOriginBill] = useState<IBill>([]);\n  const [bill, setBill] = useState<IBill>([]);\n  const [billLoaded, setBillLoaded] = useState(false);\n  const [formCategory, setFormCategory] = useState<string>();\n\n  const [categoryFileName, setCategoryFileName] = useState<string>('');\n  const [billFileName, setBillFileName] = useState<string>('');\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    let data: any[] = [];\n    let columnSum: {[index: string]: any} = {};\n\n    let newBill = bill;\n    if(yearSelected && monthSelected){\n      newBill = newBill.filter((item: any) => item.year === yearSelected && item.month === monthSelected);\n    }\n\n    newBill.forEach((item: IBillItem) => {\n      data.push({\n        [item.category]: item.amount,\n        date: item.fullString,\n        year: item.year,\n        month: item.month,\n        day: item.date,\n        id: `${item.time}-${item.category}-${item.amount}`\n      })\n\n      if(yearSelected && monthSelected){\n        if(!columnSum[item.category]){\n          columnSum[item.category] = item.amount;\n          columnSum['id'] = 'columnSum';\n          columnSum['outcome'] = 0;\n          columnSum['income'] = 0;\n          columnSum['date'] = `${item.year}-${item.month}`;\n\n        } else {\n          columnSum[item.category] = columnSum[item.category] + item.amount;\n        }\n      }\n    });\n\n    if(Object.keys(columnSum).length > 0){\n      for(let i of Object.keys(columnSum)){\n        if(categories[i]){\n          if(categories[i].type === 0){\n            columnSum['outcome'] = columnSum['outcome'] + columnSum[i];\n          } else if(categories[i].type === 1){\n            if(columnSum[i] > 0){\n              columnSum['income'] = columnSum['income'] + columnSum[i];\n            } else {\n              columnSum['outcome'] = columnSum['outcome'] - columnSum[i];\n            }\n          }\n        }\n\n      }\n    }\n\n    let result = data.sort((a, b) => (a.year - b.year) || (a.month - b.month) || (a.day - b.day) );\n\n    if(yearSelected && monthSelected){\n      result = [\n        columnSum,\n        ...result,\n      ]\n    }\n\n    setTableData(result);\n\n    const columns = getTableColumns(columnSum);\n    setTableColumns(columns);\n    // eslint-disable-next-line\n  }, [categoriesLoaded, billLoaded, bill, yearSelected, monthSelected])\n\n  const handleCategories = (params: IParseResult) => {\n    const {\n      data = [],\n      errors,\n      meta,\n    } = params || {}\n\n    if(Array.isArray(errors) && errors.length === 0){\n      const {\n        fields = [],\n      } = meta || {}\n\n      if(\n        !fields.includes('id')\n        || !fields.includes('name')\n        || !fields.includes('type')\n        || fields.length !== 3\n      ){\n        message.warn(`This is not categories.csv, please choose categories.csv`);\n        setCategoryFileName('');\n        return;\n      }\n      setOriginCategories(data);\n\n      let categories: ICategories = {};\n      data.forEach((category: ICategory) => {\n        categories[category.id] = {\n          ...category,\n          type: category.type - 0,\n        };\n      })\n\n      setCategories(categories);\n      setCategoriesLoaded(true);\n      message.success('File added successed!')\n    } else {\n      console.error('handleCategories errors', errors)\n    }\n  }\n\n  const handleBill = (params: IParseResult) => {\n    const {\n      data = [],\n      errors,\n      meta,\n    } = params || {}\n\n    if(Array.isArray(errors) && errors.length === 0){\n      const {\n        fields = [],\n      } = meta || {}\n\n      if(\n        !fields.includes('amount')\n        ||!fields.includes('category')\n        || !fields.includes('time')\n        || !fields.includes('type')\n        || fields.length !== 4\n      ){\n        message.warn(`This is not bill.csv, please choose bill.csv`);\n        setBillFileName('');\n        return;\n      }\n      setOriginBill(data);\n\n      handleBillData(data);\n      message.success('File added successed!')\n    } else {\n      console.error('handleBill errors', errors)\n    }\n  }\n\n  const handleBillData = (data: any) => {\n    let newData: IBill = [];\n    let allMonths: {[index: string]: Set<number>} = {};\n    let allYears = new Set<number>();\n    data.forEach((item: any) => {\n      const newTime = item.time - 0;\n\n      const {\n        year,\n        month,\n        fullString,\n        date,\n      } = parseMilisecond(newTime);\n\n      allYears.add(year);\n      if(!allMonths[year]){\n        allMonths[year] = new Set();\n        allMonths[year].add(0);\n        allMonths[year].add(month);\n      } else {\n        allMonths[year].add(month);\n      }\n\n      return newData.push({\n        type: item.type - 0,\n        category: item.category,\n        time: newTime,\n        amount: item.amount - 0,\n        year,\n        month,\n        date,\n        fullString,\n      })\n    })\n\n    setYears([...allYears.values()].sort((a, b) => a - b));\n    setMonths(allMonths);\n\n    setBill(newData);\n    setBillLoaded(true);\n  }\n\n  const getTableColumns = (columnsData: {[index: string]: any}) => {\n    let columns: ICategory[] = [];\n\n    originCategories.forEach((item: ICategory) => columns.push({\n      title: item.name,\n      dataIndex: item.id,\n    }));\n\n    let outcomes: any[] = [];\n    let incomes: any[] = [];\n\n    columns.forEach((column) => {\n      if(categories[column.dataIndex].type === 0){\n        outcomes.push(column);\n\n      } else if(categories[column.dataIndex].type === 1){\n        if(columnsData[column.dataIndex] > 0){\n          incomes.push(column);\n        } else {\n          outcomes.push(column);\n        }\n      }\n    })\n\n    outcomes = outcomes.sort((a, b) => Math.abs(columnsData[b.dataIndex] || 0) - Math.abs(columnsData[a.dataIndex] || 0));\n    incomes = incomes.sort((a, b) => Math.abs(columnsData[a.dataIndex] || 0) - Math.abs(columnsData[b.dataIndex] || 0));\n\n    const start = [\n      {\n        title: '日期',\n        dataIndex: 'date',\n      }\n    ]\n\n    const ends = [\n      {\n        title: '收入',\n        dataIndex: 'income',\n      },\n      {\n        title: '支出',\n        dataIndex: 'outcome',\n      },\n    ]\n\n    return [\n      ...start,\n      ...outcomes,\n      ...incomes,\n      ...(yearSelected && monthSelected ? ends : [])\n    ];\n  }\n\n\n  const handleAddModal = async() => {\n    try {\n      const values = await form.validateFields();\n\n      const time =  moment(values.time).utcOffset(offset).valueOf();\n      const newValues = {\n        ...values,\n        time,\n        type: categories[values.category].type,\n      }\n\n      const billData = [...originBill, newValues];\n      setOriginBill(billData);\n      handleBillData(billData);\n      setShowAddModal(false);\n      form.setFieldsValue({\n        time: '',\n        category: '',\n        amount: '',\n      });\n      message.success('Row added successed!')\n    } catch (errorInfo) {\n      console.log('Failed:', errorInfo);\n    }\n  }\n\n  const layout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 },\n  };\n\n  const getInput = () => {\n    const mayNegtive = [\"1vjj47vpd28\", \"5il79e11628\"];\n\n    if(formCategory && mayNegtive.includes(formCategory)){\n      return <InputNumber  step={100}/>\n    }\n\n    return <InputNumber min={1} step={100}/>\n  }\n\n  return (\n    <div className={prefix}>\n      <div className=\"header\">\n        {\n          !categoriesLoaded &&\n          <Papaparser\n            fileName={categoryFileName}\n            setFileName={setCategoryFileName}\n            title='Click to upload Categories CSV file'\n            onFileLoaded={handleCategories}\n          />\n        }\n        {\n          !billLoaded &&\n          <Papaparser\n            fileName={billFileName}\n            setFileName={setBillFileName}\n            title='Click to upload Bill CSV file'\n            onFileLoaded={handleBill}\n          />\n        }\n        {\n          categoriesLoaded && billLoaded &&\n          <div className='selector'>\n            {\n              years && years.length > 0 &&\n              <Select\n                placeholder='Select Year'\n                style={{ width: 'auto', minWidth: '100px' }}\n                onChange={(value: number) => {\n                  setYearSelected(value);\n                  setMonthSelected(0);\n                }}\n                value={yearSelected}\n              >\n                {\n                  years.map((year: number) => (<Option key={year} value={year}>{year}</Option>))\n                }\n              </Select>\n            }\n            {\n              yearSelected && months && months[yearSelected] && [...months[yearSelected].values()].length > 0 &&\n              <Select\n                placeholder='Select Month'\n                style={{ width: 'auto', minWidth: '100px' }}\n                onChange={(value: number) => setMonthSelected(value)}\n                value={monthSelected}\n              >\n                {\n                  [...months[yearSelected].values()].map((month: number) => (<Option key={month} value={month}>{month === 0 ? 'None' : month}</Option>))\n                }\n              </Select>\n            }\n          </div>\n        }\n        {\n          categoriesLoaded && billLoaded &&\n          <Button onClick={() => setShowAddModal(true)} type=\"primary\">Add a row</Button>\n        }\n      </div>\n      <div className=\"content\">\n        {\n          categoriesLoaded && billLoaded &&\n          <Table\n            columns={tableColumns}\n            dataSource={tableData}\n            rowKey={'id'}\n            pagination={false}\n            scroll={{y: `${document.body.clientHeight- 100}px`}}\n            style={{\n              width: '100%',\n            }}\n          />\n        }\n      </div>\n      {\n        showAddModal&&\n        <Modal\n          title=\"Add a row\"\n          visible={true}\n          onOk={handleAddModal}\n          onCancel={() => setShowAddModal(false)}\n        >\n          <Form\n            {...layout}\n            name=\"basic\"\n            form={form}\n          >\n            <Form.Item\n              label=\"Time\"\n              name=\"time\"\n              rules={[{ required: true, message: 'Please choose time!' }]}\n            >\n              <DatePicker showTime />\n            </Form.Item>\n            <Form.Item\n              label=\"Category\"\n              name=\"category\"\n              rules={[{ required: true, message: 'Please choose category!' }]}\n            >\n              <Select onChange={(value: string) => setFormCategory(value)}>\n                {originCategories.map((item) => <Select.Option key={item.id} value={item.id}>{item.name}</Select.Option>)}\n              </Select>\n            </Form.Item>\n            <Form.Item\n              label=\"Amount\"\n              name=\"amount\"\n              rules={[{ required: true, message: 'Please input amount!' }]}\n            >\n              {getInput()}\n            </Form.Item>\n          </Form>\n        </Modal>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import moment from 'moment';\nimport Constants from './Constants';\n\nexport const parseMilisecond = (time: number) => {\n  const offset = moment().utcOffset();\n  const date = moment(time).utcOffset(offset);\n  return {\n    date: date.date(),\n    month: date.month() + 1,\n    year: date.year(),\n    fullString: date.format(Constants.YMD),\n  }\n}","\nimport './App.less';\nexport const prefix = 'bg-c-app';\n\nexport { default } from './App';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}